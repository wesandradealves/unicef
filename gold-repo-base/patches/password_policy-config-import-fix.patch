diff --git a/password_policy.install b/password_policy.install
index 72f07fe..85bc559 100644
--- a/password_policy.install
+++ b/password_policy.install
@@ -9,6 +9,9 @@
  * Implements hook_install().
  */
 function password_policy_install() {
+  if (\Drupal::isConfigSyncing()) {
+    return;
+  }
   // Set user password reset timestamp to now.
   $timestamp = \Drupal::service("date.formatter")->format(\Drupal::time()->getRequestTime(), "custom", DATETIME_DATETIME_STORAGE_FORMAT, DATETIME_STORAGE_TIMEZONE);
   /** @var \Drupal\user\UserInterface[] $users */
diff --git a/src/EventSubscriber/PasswordPolicyEventSubscriber.php b/src/EventSubscriber/PasswordPolicyEventSubscriber.php
index 4090a1d..1b09563 100644
--- a/src/EventSubscriber/PasswordPolicyEventSubscriber.php
+++ b/src/EventSubscriber/PasswordPolicyEventSubscriber.php
@@ -9,6 +9,8 @@ use Symfony\Component\HttpKernel\Event\GetResponseEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Drupal\user\Entity\User;
+use Drupal\Core\Config\ConfigEvents;
+use Drupal\Core\Config\ConfigImporterEvent;

 /**
  * Enforces password reset functionality.
@@ -38,11 +40,13 @@ class PasswordPolicyEventSubscriber implements EventSubscriberInterface {
       $is_ajax = $request->headers->get('X_REQUESTED_WITH') == 'XMLHttpRequest';

       $user_expired = FALSE;
-      if ($user->get('field_password_expiration')->get(0)) {
-        $user_expired = $user->get('field_password_expiration')
-          ->get(0)
-          ->getValue();
-        $user_expired = $user_expired['value'];
+      if ($user->hasField('field_password_expiration')) {
+        if ($user->get('field_password_expiration')->get(0)) {
+          $user_expired = $user->get('field_password_expiration')
+            ->get(0)
+            ->getValue();
+          $user_expired = $user_expired['value'];
+        }
       }

       // TODO - Consider excluding admins here.
@@ -56,11 +60,41 @@ class PasswordPolicyEventSubscriber implements EventSubscriberInterface {
   }

   /**
+   * Updates password reset value for all users.
+   *
+   * @param \Drupal\Core\Config\ConfigImporterEvent $event
+   *   The config importer event.
+   */
+  public function onConfigImport(ConfigImporterEvent $event) {
+    $modules = $event->getConfigImporter()->getExtensionChangelist('module', 'install');
+
+    if (!in_array('password_policy', $modules)) {
+      return;
+    }
+    $timestamp = gmdate(DATETIME_DATETIME_STORAGE_FORMAT, REQUEST_TIME);
+
+    /** @var \Drupal\user\UserInterface[] $users */
+    $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple();
+
+    // @todo Get rid of updating all users.
+    foreach ($users as $user) {
+      if ($user->getAccountName() == NULL) {
+        continue;
+      }
+      $user
+        ->set('field_last_password_reset', $timestamp)
+        ->set('field_password_expiration', '0')
+        ->save();
+    }
+  }
+
+  /**
    * {@inheritdoc}
    */
   public static function getSubscribedEvents() {
     // TODO - Evaluate if there is a better place to add this check.
     $events[KernelEvents::REQUEST][] = ['checkForUserPasswordExpiration'];
+    $events[ConfigEvents::IMPORT][] = ['onConfigImport'];
     return $events;
   }

diff --git a/tests/src/Functional/ConfigImportTest.php b/tests/src/Functional/ConfigImportTest.php
index e69de29..ee10dce 100644
--- a/tests/src/Functional/ConfigImportTest.php
+++ b/tests/src/Functional/ConfigImportTest.php
@@ -0,0 +1,38 @@
+<?php
+
+namespace Drupal\Tests\password_policy\Functional;
+
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * Tests the user interface for importing configuration.
+ *
+ * @group config
+ */
+class ConfigImportTest extends BrowserTestBase {
+
+  /**
+   * Modules to install.
+   *
+   * @var array
+   */
+  public static $modules = ['config', 'password_policy'];
+
+  /**
+   * Test config import.
+   *
+   * Tests the config importer can import config without password_policy
+   * module being enabled when there is password_policy config present in
+   * sync.
+   */
+  public function testConfigImportDisabledModule() {
+    $this->drupalLogin($this->drupalCreateUser(['synchronize configuration']));
+    // Export config.
+    $this->copyConfig($this->container->get('config.storage'), $this->container->get('config.storage.sync'));
+    // Disable module.
+    \Drupal::service('module_installer')->uninstall(['password_policy']);
+    // Import config.
+    $this->configImporter()->import();
+  }
+
+}
\ No newline at end of file
