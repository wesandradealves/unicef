diff --git a/README.md b/README.md
index badb686..2fa5779 100644
--- a/README.md
+++ b/README.md
@@ -14,10 +14,20 @@ This module helps you to protect your (dev) site with HTTP authentication.
 
 To enable shield:
 
-1. Enable the module
+1. Enable the module.
 2. Go to the admin interface (admin/config/system/shield).
 3. In the form select the **Enable** checkbox and add **User** and **Password**.
-4. Nothing else :)
+4. Select a method of path protection to use (if any):
+  * Exclude (default) will Shield all paths except the ones listed.
+  * Include will *only* Shield the paths listed.
+5. Add the paths (with a a leading slash) to be include or excluded (none by default).
+    Example: To only shield the administration interface - set the Path Method to _Include_ and use these paths:
+    ```
+    /admin
+    /admin/*
+    ```
+6. The default settings will Shield all paths on the site once a username is added.
+7. Nothing else :)
 
 Leaving the **User** field blank disables shield even if **Enable** is checked.
 
diff --git a/composer.json b/composer.json
index 986d134..abf67f7 100644
--- a/composer.json
+++ b/composer.json
@@ -1,12 +1,13 @@
 {
     "name": "drupal/shield",
+    "description": "Creates a general shield for the site.",
     "type": "drupal-module",
     "license": "GPL-2.0-or-later",
     "require-dev": {
         "drupal/key": "^1.0"
     },
     "require": {
-        "drupal/core": "^8.6 || ^9"
+        "drupal/core": "^8.7.7 || ^9"
     },
     "extra": {
         "branch-alias": {
diff --git a/config/install/shield.settings.yml b/config/install/shield.settings.yml
index 6c2cc02..6eab89f 100644
--- a/config/install/shield.settings.yml
+++ b/config/install/shield.settings.yml
@@ -11,3 +11,5 @@ credentials:
     user_pass_key: ''
 print: 'Hello!'
 allow_cli: true
+method: 0
+paths: ''
diff --git a/config/schema/shield.schema.yml b/config/schema/shield.schema.yml
index c087784..a08cf00 100644
--- a/config/schema/shield.schema.yml
+++ b/config/schema/shield.schema.yml
@@ -21,9 +21,18 @@ shield.settings:
     print:
       type: string
       label: 'The greeting text, [user] and [pass] tokens are usable.'
+    method:
+      type: integer
+      label: 'Determines if paths should be excluded or included from Shield protection.'
+    paths:
+      type: text
+      label: 'Newline delimited list of paths that should be excluded or included from Shield protection.'
     whitelist:
       type: string
       label: 'Bypass shield based on user IP'
+    domains:
+      type: text
+      label: 'Bypass shield based on domain name'
 
 shield.credentials.shield:
   type: mapping
diff --git a/shield.info.yml b/shield.info.yml
index 1b17336..8c15579 100644
--- a/shield.info.yml
+++ b/shield.info.yml
@@ -3,11 +3,6 @@ description: 'Creates a general shield for the site.'
 package: 'Administration'
 
 type: module
-core_version_requirement: ^8.7.7 || ^9
+core_version_requirement: ^8.8 || ^9
 
 configure: shield.settings
-
-# Information added by Drupal.org packaging script on 2020-03-30
-version: '8.x-1.4'
-project: 'shield'
-datestamp: 1585608549
diff --git a/shield.module b/shield.module
index 52b1850..ef9661a 100644
--- a/shield.module
+++ b/shield.module
@@ -16,9 +16,7 @@ function shield_help($route_name, RouteMatchInterface $route_match) {
     case 'help.page.shield':
       $output = '';
       $output .= '<h3>' . t('About') . '</h3>';
-      $output .= '<p>' . t('It creates a simple shield for the site with HTTP
-            basic authentication. It hides the sites, if the user does not know a simple
-        username/password.') . '</p>';
+      $output .= '<p>' . t('It creates a simple shield for the site with HTTP basic authentication. It hides the sites, if the user does not know a simple username/password.') . '</p>';
       return $output;
 
     default:
diff --git a/shield.routing.yml b/shield.routing.yml
index 8923516..566441d 100644
--- a/shield.routing.yml
+++ b/shield.routing.yml
@@ -1,7 +1,7 @@
 shield.settings:
- path: '/admin/config/system/shield'
- defaults:
-   _title: 'Shield'
-   _form: 'Drupal\shield\Form\ShieldSettingsForm'
- requirements:
-   _permission: 'administer shield'
+  path: '/admin/config/system/shield'
+  defaults:
+    _title: 'Shield'
+    _form: 'Drupal\shield\Form\ShieldSettingsForm'
+  requirements:
+    _permission: 'administer shield'
diff --git a/shield.services.yml b/shield.services.yml
index 8780ed0..ca2d800 100644
--- a/shield.services.yml
+++ b/shield.services.yml
@@ -1,7 +1,13 @@
 services:
   shield.middleware:
     class: Drupal\shield\ShieldMiddleware
-    arguments: ['@config.factory']
+    arguments:
+      - '@config.factory'
+      - '@path.matcher'
+      - '@entity_type.manager'
+      - '@path_alias.manager'
+      - '@language_manager'
+      - '@module_handler'
     tags:
       # Ensure to come before page caching, so you don't serve cached pages to
       # banned users.
diff --git a/src/Form/ShieldSettingsForm.php b/src/Form/ShieldSettingsForm.php
index 64dbc95..2e87410 100644
--- a/src/Form/ShieldSettingsForm.php
+++ b/src/Form/ShieldSettingsForm.php
@@ -2,15 +2,61 @@
 
 namespace Drupal\shield\Form;
 
-use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\Markup;
+use Drupal\key\Plugin\KeyPluginManager;
+use Drupal\shield\ShieldMiddleware;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Configure site information settings for this site.
  */
 class ShieldSettingsForm extends ConfigFormBase {
 
+  /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * The key type manager, if exists.
+   *
+   * @var \Drupal\key\Plugin\KeyPluginManager|null
+   */
+  protected $keyTypeManager;
+
+  /**
+   * ShieldSettingsForm constructor.
+   *
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The config factory.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   The module handler.
+   * @param \Drupal\key\Plugin\KeyPluginManager|null $keyTypeManager
+   *   The key type manager.
+   */
+  public function __construct(ConfigFactoryInterface $config_factory, ModuleHandlerInterface $moduleHandler, KeyPluginManager $keyTypeManager = NULL) {
+    parent::__construct($config_factory);
+    $this->moduleHandler = $moduleHandler;
+    $this->keyTypeManager = $keyTypeManager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('config.factory'),
+      $container->get('module_handler'),
+      $container->get('plugin.manager.key.key_type', ContainerInterface::NULL_ON_INVALID_REFERENCE)
+    );
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -34,150 +80,170 @@ class ShieldSettingsForm extends ConfigFormBase {
     // Submitted form values should be nested.
     $form['#tree'] = TRUE;
 
-    $form['description'] = array(
+    $form['description'] = [
       '#type' => 'item',
       '#title' => $this->t('Shield settings'),
       '#description' => $this->t('Set up credentials for an authenticated user. You can also decide whether you want to print out the credentials or not.'),
-    );
+    ];
 
-    $form['general'] = array(
+    $form['general'] = [
       '#type' => 'fieldset',
       '#title' => $this->t('General settings'),
-    );
+    ];
 
-    $form['general']['shield_enable'] = array(
+    $form['general']['shield_enable'] = [
       '#type' => 'checkbox',
       '#title' => $this->t('Enable Shield'),
       '#description' => $this->t('Enable/Disable shield functionality. All other settings are ignored if this is not checked.'),
       '#default_value' => $shield_config->get('shield_enable'),
-    );
-
-    $form['general']['shield_allow_cli'] = array(
-      '#type' => 'checkbox',
-      '#title' => $this->t('Allow command line access'),
-      '#description' => $this->t('When the site is accessed from command line (e.g. from Drush, cron), the shield should not work.'),
-      '#default_value' => $shield_config->get('allow_cli'),
-    );
+    ];
 
-    $form['general']['whitelist'] = array(
+    $form['general']['whitelist'] = [
       '#type' => 'textarea',
       '#title' => $this->t('IP Whitelist'),
       '#description' => $this->t("Enter list of IP's for which shield should not be shown, one per line. You can use Network ranges in the format 'IP/Range'.<br><em>Warning: Whitelist interferes with reverse proxy caching! @strong_style_tag Do not use whitelist if reverse proxy caching is in use!</strong></em>", [
-          '@strong_style_tag' => Markup::create("<strong style='color:red'>"),
-        ]),
+        '@strong_style_tag' => Markup::create("<strong style='color:red'>"),
+      ]),
       '#default_value' => $shield_config->get('whitelist'),
-      '#placeholder' => $this->t("Example:\n192.168.0.1/24\n127.0.0.1")
-    );
+      '#placeholder' => $this->t("Example:\n192.168.0.1/24\n127.0.0.1"),
+    ];
+
+    $form['general']['shield_domains'] = [
+      '#type' => 'textarea',
+      '#title' => $this->t('Whitelist Domains'),
+      '#description' => $this->t('Enter list of domain host names for which shield should not be shown, one per line.'),
+      '#default_value' => $shield_config->get('domains'),
+      '#placeholder' => $this->t("Example:\nexample.com\ndomain.in"),
+    ];
 
-    $form['credentials'] = array(
+    $form['credentials'] = [
       '#id' => 'credentials',
       '#type' => 'details',
       '#title' => $this->t('Credentials'),
       '#open' => TRUE,
-    );
+    ];
 
     $credential_provider = $shield_config->get('credential_provider');
     $credential_provider = ($form_state->hasValue(['credentials', 'credential_provider'])) ? $form_state->getValue(['credentials', 'credential_provider']) : $credential_provider;
 
-    $form['credentials']['credential_provider'] = array(
+    $form['credentials']['credential_provider'] = [
       '#type' => 'select',
       '#title' => $this->t('Credential provider'),
       '#options' => [
         'shield' => 'Shield',
       ],
       '#default_value' => $credential_provider,
-      '#ajax' => array(
-        'callback' => array($this, 'ajaxCallback'),
+      '#ajax' => [
+        'callback' => [$this, 'ajaxCallback'],
         'wrapper' => 'credentials_configuration',
         'method' => 'replace',
         'effect' => 'fade',
-      ),
-    );
+      ],
+    ];
 
     $form['credentials']['providers'] = [
       '#type' => 'item',
       '#id' => 'credentials_configuration',
     ];
 
-    if (\Drupal::moduleHandler()->moduleExists('key')) {
-      $form['credentials']['credential_provider']['#options']['key'] = 'Key Module';
+    if ($this->keyTypeManager) {
+      $form['credentials']['credential_provider']['#options']['key'] = $this->t('Key Module');
 
-      /** @var \Drupal\key\Plugin\KeyPluginManager $key_type */
-      $key_type = \Drupal::service('plugin.manager.key.key_type');
-      if ($key_type->hasDefinition('user_password')) {
-        $form['credentials']['credential_provider']['#options']['multikey'] = 'Key Module (user/password)';
+      if ($this->keyTypeManager->hasDefinition('user_password')) {
+        $form['credentials']['credential_provider']['#options']['multikey'] = $this->t('Key Module (user/password)');
       }
     }
 
     if ($credential_provider == 'shield') {
-      $form['credentials']['providers']['shield']['user'] = array(
+      $form['credentials']['providers']['shield']['user'] = [
         '#type' => 'textfield',
         '#title' => $this->t('User'),
         '#default_value' => $shield_config->get('credentials.shield.user'),
         '#description' => $this->t('Leave blank to disable authentication.'),
-      );
-      $form['credentials']['providers']['shield']['pass'] = array(
+      ];
+      $form['credentials']['providers']['shield']['pass'] = [
         '#type' => 'textfield',
         '#title' => $this->t('Password'),
         '#default_value' => $shield_config->get('credentials.shield.pass'),
-      );
+      ];
     }
     elseif ($credential_provider == 'key') {
-      $form['credentials']['providers']['key']['user'] = array(
+      $form['credentials']['providers']['key']['user'] = [
         '#type' => 'textfield',
         '#title' => $this->t('User'),
         '#default_value' => $shield_config->get('credentials.key.user'),
         '#required' => TRUE,
-      );
-      $form['credentials']['providers']['key']['pass_key'] = array(
+      ];
+      $form['credentials']['providers']['key']['pass_key'] = [
         '#type' => 'key_select',
         '#title' => $this->t('Password'),
         '#default_value' => $shield_config->get('credentials.key.pass_key'),
         '#empty_option' => $this->t('- Please select -'),
         '#key_filters' => ['type' => 'authentication'],
         '#required' => TRUE,
-      );
+      ];
     }
     elseif ($credential_provider == 'multikey') {
-      $form['credentials']['providers']['multikey']['user_pass_key'] = array(
+      $form['credentials']['providers']['multikey']['user_pass_key'] = [
         '#type' => 'key_select',
         '#title' => $this->t('User/password'),
         '#default_value' => $shield_config->get('credentials.multikey.user_pass_key'),
         '#empty_option' => $this->t('- Please select -'),
         '#key_filters' => ['type' => 'user_password'],
         '#required' => TRUE,
-      );
+      ];
     }
 
-    $form['shield_print'] = array(
+    $form['paths'] = [
+      '#type' => 'fieldset',
+      '#title' => $this->t('Paths'),
+      '#description' => $this->t('According to the Shield path method selected above, these paths will be either excluded from, or included in Shield protection. Leave this blank and select "exclude" to protect all paths. Include a leading slash.'),
+    ];
+
+    $form['paths']['shield_method'] = [
+      '#type' => 'radios',
+      '#title' => $this->t('Path Method'),
+      '#default_value' => $shield_config->get('method'),
+      '#options' => [ShieldMiddleware::EXCLUDE_METHOD => $this->t('Exclude'), ShieldMiddleware::INCLUDE_METHOD => $this->t('Include')],
+    ];
+
+    $form['paths']['shield_paths'] = [
+      '#type' => 'textarea',
+      '#title' => $this->t('Paths'),
+      '#default_value' => $shield_config->get('paths'),
+    ];
+
+    $form['general']['shield_allow_cli'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Allow command line access'),
+      '#description' => $this->t('When the site is accessed from command line (e.g. from Drush, cron), the shield should not work.'),
+      '#default_value' => $shield_config->get('allow_cli'),
+    ];
+
+    $form['shield_print'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Authentication message'),
       '#description' => $this->t("The message to print in the authentication request popup. You can use [user] and [pass] to print the user and the password respectively. You can leave it empty, if you don't want to print out any special message to the users."),
       '#default_value' => $shield_config->get('print'),
-    );
+    ];
 
     return parent::buildForm($form, $form_state);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function validateForm(array &$form, FormStateInterface $form_state) {
-    parent::validateForm($form, $form_state);
-  }
-
   /**
    * {@inheritdoc}
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
-
     $shield_config = $this->config('shield.settings');
     $credential_provider = $form_state->getValue(['credentials', 'credential_provider']);
     $shield_config
       ->set('allow_cli', $form_state->getValue(['general', 'shield_allow_cli']))
       ->set('shield_enable', $form_state->getValue(['general', 'shield_enable']))
       ->set('whitelist', $form_state->getValue(['general', 'whitelist']))
+      ->set('domains', $form_state->getValue(['general', 'shield_domains']))
       ->set('print', $form_state->getValue('shield_print'))
+      ->set('method', $form_state->getValue(['paths', 'shield_method']))
+      ->set('paths', $form_state->getValue(['paths', 'shield_paths']))
       ->set('credential_provider', $credential_provider);
     $credentials = $form_state->getValue([
       'credentials',
diff --git a/src/ShieldMiddleware.php b/src/ShieldMiddleware.php
index 38e0e3d..2749b2a 100644
--- a/src/ShieldMiddleware.php
+++ b/src/ShieldMiddleware.php
@@ -2,18 +2,29 @@
 
 namespace Drupal\shield;
 
-use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Config\ImmutableConfig;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\Core\Path\PathMatcherInterface;
+use Drupal\path_alias\AliasManager;
 use Symfony\Component\HttpFoundation\IpUtils;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
 
 /**
  * Middleware for the shield module.
  */
 class ShieldMiddleware implements HttpKernelInterface {
 
+  /**
+   * Constants representing if configured paths should be included or excluded.
+   */
+  const EXCLUDE_METHOD = 0;
+  const INCLUDE_METHOD = 1;
+
   /**
    * The decorated kernel.
    *
@@ -28,6 +39,42 @@ class ShieldMiddleware implements HttpKernelInterface {
    */
   protected $configFactory;
 
+  /**
+   * The path matcher.
+   *
+   * @var \Drupal\Core\Path\PathMatcherInterface
+   */
+  protected $pathMatcher;
+
+  /**
+   * The module handler.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+
+  /**
+   * The path alias manager.
+   *
+   * @var \Drupal\path_alias\AliasManager
+   */
+  protected $pathAliasManager;
+
+  /**
+   * Language Manager.
+   *
+   * @var \Drupal\Core\Language\LanguageManagerInterface
+   */
+  protected $languageManager;
+
+  /**
+   * The EntityTypeManager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
   /**
    * Constructs a BanMiddleware object.
    *
@@ -35,10 +82,34 @@ class ShieldMiddleware implements HttpKernelInterface {
    *   The decorated kernel.
    * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
    *   The configuration factory.
+   * @param \Drupal\Core\Path\PathMatcherInterface $path_matcher
+   *   The path matcher service.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The EntityTypeManager service.
+   * @param \Drupal\path_alias\AliasManager $path_alias_manager
+   *   The path alias manager.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
+   *   Language Manager.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler.
    */
-  public function __construct(HttpKernelInterface $http_kernel, ConfigFactoryInterface $config_factory) {
+  
+  public function __construct(
+    HttpKernelInterface $http_kernel,
+    ConfigFactoryInterface $config_factory,
+    PathMatcherInterface $path_matcher,
+    EntityTypeManagerInterface $entity_type_manager,
+    AliasManager $path_alias_manager,
+    LanguageManagerInterface $language_manager,
+    ModuleHandlerInterface $module_handler
+  ) {
     $this->httpKernel = $http_kernel;
     $this->configFactory = $config_factory;
+    $this->pathMatcher = $path_matcher;
+    $this->entityTypeManager = $entity_type_manager;
+    $this->pathAliasManager = $path_alias_manager;
+    $this->languageManager = $language_manager;
+    $this->moduleHandler = $module_handler;
   }
 
   /**
@@ -47,6 +118,7 @@ class ShieldMiddleware implements HttpKernelInterface {
   public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = TRUE) {
     $config = $this->configFactory->get('shield.settings');
     $allow_cli = $config->get('allow_cli');
+    $basic_auth_enabled = $this->moduleHandler->moduleExists('basic_auth');
     $user = NULL;
 
     switch ($config->get('credential_provider')) {
@@ -59,7 +131,7 @@ class ShieldMiddleware implements HttpKernelInterface {
         $user = $config->get('credentials.key.user');
 
         /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
-        $storage = \Drupal::entityTypeManager()->getStorage('key');
+        $storage = $this->entityTypeManager->getStorage('key');
         /** @var \Drupal\key\KeyInterface $pass_key */
         $pass_key = $storage->load($config->get('credentials.key.pass_key'));
         if ($pass_key) {
@@ -69,7 +141,7 @@ class ShieldMiddleware implements HttpKernelInterface {
 
       case 'multikey':
         /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
-        $storage = \Drupal::entityTypeManager()->getStorage('key');
+        $storage = $this->entityTypeManager->getStorage('key');
         /** @var \Drupal\key\KeyInterface $user_pass_key */
         $user_pass_key = $storage->load($config->get('credentials.multikey.user_pass_key'));
         if ($user_pass_key) {
@@ -83,12 +155,24 @@ class ShieldMiddleware implements HttpKernelInterface {
     // Check if enabled.
     $shield_enabled = $config->get('shield_enable') && !empty($user);
 
-    if (!$shield_enabled || $type != self::MASTER_REQUEST || (PHP_SAPI === 'cli' && $allow_cli)) {
+    $bypass = FALSE;
+    $auth = FALSE;
+
+    if (!$shield_enabled || $type != self::MASTER_REQUEST || !$user || (PHP_SAPI === 'cli' && $allow_cli) || ($shield_enabled && $path_matched = $this->checkPathAllowed($request, $config))) {
+      // Return so that we can use Basic auth for Authorization.
+      if ($shield_enabled && $path_matched) {
+        return $this->httpKernel->handle($request, $type, $catch);
+      }
+      if ($basic_auth_enabled) {
+        $this->preventBasicAuthTriggering($request);
+      }
+
       // Bypass:
-      // 1. Empty username or Disabled from configuration.
-      // 2. Subrequests.
+      // 1. Sub requests.
+      // 2. Empty username or Disabled from configuration.
       // 3. CLI requests if CLI is allowed.
-      return $this->httpKernel->handle($request, $type, $catch);
+      // 4. Path is added to exception.
+      $bypass = TRUE;
     }
     else {
       // Check if user IP is in whitelist.
@@ -98,6 +182,14 @@ class ShieldMiddleware implements HttpKernelInterface {
         $in_whitelist = IpUtils::checkIp($request->getClientIp(), $whitelist);
       }
 
+      // Check if site domain is in whitelist.
+      $allow_domain = FALSE;
+      if ($domains = $config->get('domains')) {
+        if (!empty($domains)) {
+          $allow_domain = $this->pathMatcher->matchPath($request->getHost(), $domains);
+        }
+      }
+
       // Check if user has provided credentials.
       if ($request->server->has('PHP_AUTH_USER') && $request->server->has('PHP_AUTH_PW')) {
         $input_user = $request->server->get('PHP_AUTH_USER');
@@ -111,11 +203,51 @@ class ShieldMiddleware implements HttpKernelInterface {
       }
       $authenticated = isset($input_user) && $input_user === $user && hash_equals($pass, $input_pass);
 
-      if ($in_whitelist || $authenticated) {
-        return $this->httpKernel->handle($request, $type, $catch);
+      if ($in_whitelist || $authenticated || $allow_domain) {
+          if ($basic_auth_enabled) {
+                    $this->preventBasicAuthTriggering($request);
+                  }
+        $auth = TRUE;
       }
     }
 
+    if ($bypass || $auth) {
+      return $this->httpKernel->handle($request, $type, $catch);
+    }
+
+          if ($basic_auth_enabled && !empty($input_user) && strlen($input_pass) > 0) {
+              // Basic auth second chance.
+              /* @var $basicAuthService \Drupal\basic_auth\Authentication\Provider\BasicAuth */
+              $basicAuthService = \Drupal::service('basic_auth.authentication.basic_auth');
+      
+              /* @var $requestStackService \Symfony\Component\HttpFoundation\RequestStack */
+              $requestStackService = \Drupal::service('request_stack');
+      
+              // We need to push the current request to the request stack because
+              // basic_auth uses a flood functionality which needs the client IP.
+              $requestStackService->push($request);
+      
+              if ($basicAuthService->authenticate($request)) {
+                // Reset request stack, as we don't need it anymore.
+                $requestStackService->pop();
+      
+                try {
+                 // Explicitly disable error catching in handle() because we want to
+                  // manage pages which are not handled by basic_auth mechanism.
+                  return $this->httpKernel->handle($request, $type, FALSE);
+                } catch(\Exception $exception) {
+                  // This happens when the current page is not handled by basic_auth
+                  // mechanism. If so, we have to unset the basic_auth headers to
+                  // prevent its systems to trigger.
+                  $this->preventBasicAuthTriggering($request);
+                  return $this->httpKernel->handle($request, $type, $catch);
+                }
+              }
+      
+              // Reset request stack, as we don't need it anymore.
+              $requestStackService->pop();
+            }
+
     $response = new Response();
     $response->headers->add([
       'WWW-Authenticate' => 'Basic realm="' . strtr($config->get('print'), [
@@ -127,4 +259,71 @@ class ShieldMiddleware implements HttpKernelInterface {
     return $response;
   }
 
+  /**
+   * Checks if the current path should be allowed to bypass shield.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The global request object.
+   * @param \Drupal\Core\Config\ImmutableConfig $config
+   *   The current Shield config.
+   *
+   * @return bool
+   *   TRUE if the current path should be bypassed, and FALSE if not.
+   */
+  public function checkPathAllowed(Request $request, ImmutableConfig $config) {
+    $paths_to_check = $config->get('paths');
+    $method = $config->get('method');
+
+    // If nothing specified in path config we can return early.
+    if (empty($paths_to_check)) {
+      if ($method == self::EXCLUDE_METHOD) {
+        return FALSE;
+      }
+      elseif ($method == self::INCLUDE_METHOD) {
+        return TRUE;
+      }
+    }
+
+    $path = $request->getPathInfo();
+
+    // Remove language code from url.
+    foreach ($this->languageManager->getLanguages() as $language) {
+      $langcode = $language->getId();
+      if (substr($path, 0, strlen($langcode) + 1) === '/' . $langcode) {
+        $path = str_replace('/' . $langcode . '/', '/', $path);
+        break;
+      }
+    }
+
+    // Remove trailing slash.
+    $path = rtrim($path, '/');
+
+    // Make it simple slash again for home page.
+    $path = empty($path) ? '/' : $path;
+
+    // Get alias of path.
+    $path = $this->pathAliasManager->getAliasByPath($path);
+
+    // Match the path using path matcher service against paths in config.
+    $path_match = $this->pathMatcher->matchPath($path, $paths_to_check);
+
+    return $path_match && $method == self::EXCLUDE_METHOD || !$path_match && $method == self::INCLUDE_METHOD;
+  }
+
+  /**
+   * Prevents basic auth triggering.
+   *
+   * Call this if basic_auth is enabled.
+   *
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *    Request object on which headers will be modified.
+   */
+  private function preventBasicAuthTriggering(Request $request) {
+    // Unset basic auth headers to prevent basic_auth trigger on
+    // subsequent kernel calls.
+    $request->headers->remove('PHP_AUTH_USER');
+    $request->headers->remove('PHP_AUTH_PW');
+  }
+
+
 }
