diff --git a/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/PasswordItem.php b/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/PasswordItem.php
index f86eac7..9786d79 100644
--- a/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/PasswordItem.php
+++ b/core/lib/Drupal/Core/Field/Plugin/Field/FieldType/PasswordItem.php
@@ -48,7 +48,7 @@ class PasswordItem extends StringItem {
     }
     elseif ($entity->isNew() || (strlen(trim($this->value)) > 0 && $this->value != $entity->original->{$this->getFieldDefinition()->getName()}->value)) {
       // Allow alternate password hashing schemes.
-      $this->value = \Drupal::service('password')->hash(trim($this->value));
+      $this->value = \Drupal::service('password')->hash($this->value);
       // Abort if the hashing failed and returned FALSE.
       if (!$this->value) {
         throw new EntityMalformedException('The entity does not have a password.');
diff --git a/core/lib/Drupal/Core/Render/Element/PasswordConfirm.php b/core/lib/Drupal/Core/Render/Element/PasswordConfirm.php
index c0f956c..372f1b8 100644
--- a/core/lib/Drupal/Core/Render/Element/PasswordConfirm.php
+++ b/core/lib/Drupal/Core/Render/Element/PasswordConfirm.php
@@ -104,8 +104,8 @@ class PasswordConfirm extends FormElement {
    * Validates a password_confirm element.
    */
   public static function validatePasswordConfirm(&$element, FormStateInterface $form_state, &$complete_form) {
-    $pass1 = trim($element['pass1']['#value']);
-    $pass2 = trim($element['pass2']['#value']);
+    $pass1 = $element['pass1']['#value'];
+    $pass2 = $element['pass2']['#value'];
     if (strlen($pass1) > 0 || strlen($pass2) > 0) {
       if (strcmp($pass1, $pass2)) {
         $form_state->setError($element, t('The specified passwords do not match.'));
diff --git a/core/modules/user/src/AccountForm.php b/core/modules/user/src/AccountForm.php
index 34e5d401..43e75098 100644
--- a/core/modules/user/src/AccountForm.php
+++ b/core/modules/user/src/AccountForm.php
@@ -374,7 +374,7 @@ abstract class AccountForm extends ContentEntityForm implements TrustedCallbackI
     }
 
     // Set existing password if set in the form state.
-    $current_pass = trim($form_state->getValue('current_pass', ''));
+    $current_pass = $form_state->getValue('current_pass', '');
     if (strlen($current_pass) > 0) {
       $account->setExistingPassword($current_pass);
     }
diff --git a/core/modules/user/src/Entity/User.php b/core/modules/user/src/Entity/User.php
index dcbebbf8..9f9e37b0 100644
--- a/core/modules/user/src/Entity/User.php
+++ b/core/modules/user/src/Entity/User.php
@@ -406,7 +406,7 @@ class User extends ContentEntityBase implements UserInterface {
   public function checkExistingPassword(UserInterface $account_unchanged) {
     $existing = $this->get('pass')->existing;
     return $existing !== NULL && strlen($existing) > 0 &&
-      \Drupal::service('password')->check(trim($existing), $account_unchanged->getPassword());
+      \Drupal::service('password')->check($existing, $account_unchanged->getPassword());
   }
 
   /**
diff --git a/core/modules/user/src/Form/UserLoginForm.php b/core/modules/user/src/Form/UserLoginForm.php
index b2fb91a..6f3e0c0 100644
--- a/core/modules/user/src/Form/UserLoginForm.php
+++ b/core/modules/user/src/Form/UserLoginForm.php
@@ -172,7 +172,7 @@ class UserLoginForm extends FormBase {
    * If successful, $form_state->get('uid') is set to the matching user ID.
    */
   public function validateAuthentication(array &$form, FormStateInterface $form_state) {
-    $password = trim($form_state->getValue('pass'));
+    $password = $form_state->getValue('pass');
     $flood_config = $this->config('user.flood');
     if (!$form_state->isValueEmpty('name') && strlen($password) > 0) {
       // Do not allow any login from the current user's IP if the limit has been
diff --git a/core/modules/user/user.es6.js b/core/modules/user/user.es6.js
index 5c2d76b..0003f14 100644
--- a/core/modules/user/user.es6.js
+++ b/core/modules/user/user.es6.js
@@ -299,7 +299,6 @@
    *   An object containing strength, message, indicatorText and indicatorClass.
    */
   Drupal.evaluatePasswordStrength = (password, passwordSettings) => {
-    password = password.trim();
     let indicatorText;
     let indicatorClass;
     let weaknesses = 0;
diff --git a/core/modules/user/user.js b/core/modules/user/user.js
index db05be1..51cae58 100644
--- a/core/modules/user/user.js
+++ b/core/modules/user/user.js
@@ -138,7 +138,6 @@
   };
 
   Drupal.evaluatePasswordStrength = function (password, passwordSettings) {
-    password = password.trim();
     var indicatorText;
     var indicatorClass;
     var weaknesses = 0;
