{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns true if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  'node',
  'node--type-' ~ (node.bundle|clean_class),
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ (view_mode|clean_class),
  'pb-5'
] %}
{{ attach_library('classy/node') }}

{# Getting the address #}
{% set paragraph = node.field_vacancy_address[0] %}
{% set addresses = paragraph ? paragraph.entity.field_paragraph_address.value : NULL %}
{% set address = addresses[0] is defined ? addresses[0] : NULL %}

<article {{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {% if label and not page %}
    <h2 {{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}
  {# Hero Banner #}
  {% include '@umio/components/hero_banner.html.twig' with {
    background: 'radial-gradient(93.5% 159.87% at 16.39% 9.84%, #9217CC 0%, #CB3D62 42.19%, #FF6002 100%)',
    company: {
      nid: node.field_vacancy_company.entity.nid.value,
      picture: node.field_vacancy_company.entity.field_company_logo,
      name: node.field_vacancy_company.entity.title.value,
      website: ''
    },
    title: label,
    subtitle: content.field_vacancy_quantity,
    badges: {
      vacancy_type: {
        icon: 'ph-suitcase',
        content: content.field_vacancy_type
      },
      job_model: {
        content: content.field_vacancy_job_model
      },
      locality: {
        icon: 'ph-map-pin',
        content: city and state and node.field_vacancy_job_model.value == 'present' ? city ~ ' - ' ~ state
          : ''
      }
    }
  } %}

  {% if content.field_vacancy_activities[0] %}
    <section class="pt-5">
      {# Job Description #}
      {% include '@umio/components/title_description.html.twig' with {
        title: 'Activities'|t,
        description: content.field_vacancy_activities[0]['#context']['value']
      } %}
    </section>
  {% endif %}

  {% if state or city %}
    <section class="pt-5">
      {% include '@umio/components/title_description.html.twig' with { title: ('Address'|t), description: city ~ ' - ' ~ state } %}
    </section>
  {% endif %}  

  {% if (content.field_vacancy_salary) %}
    <section class="pt-5">
      {# Salary #}
      {% include '@umio/components/title_description.html.twig' with {
        title: 'Salary'|t
      } %}

      {% if
        content.field_vacancy_salary_options['#items'].getString()
          == 'unique' %}
        {% include '@umio/components/field_range.html.twig' with {
          value: content.field_vacancy_salary
        } %}
      {% else %}
        {% include '@umio/components/field_range.html.twig' with {
          ranges: {
            0: {
              start: content.group_range_vacancy_salary.field_vacancy_salary_min,
              end: content.group_range_vacancy_salary.field_vacancy_salary_max
            }
          }
        } %}
      {% endif %}
    </section>
  {% endif %}

  {% if (content.field_vacancy_benefits|length) > 3 %}
    <section class="pt-5">
      {# Benefits #}
      {% include '@umio/components/title_description.html.twig' with {
        title: 'Benefits'|t
      } %}

      {% include '@umio/components/tags.html.twig' with {
        tags: content.field_vacancy_benefits
      } %}
    </section>
  {% endif %}

  {% if logged_in %}
    {% if content.field_vacancy_subscription_url[0] %}
      <section class="pt-5">
        {% include '@umio/components/call-to-action.html.twig' with {
          url: content.field_vacancy_subscription_url[0]['#plain_text'],
          title: 'I want to sign up'|t
        } %}
      </section>
    {% endif %}
  {% else %}
    <section class="pt-5">
      {% include '@umio/components/call-to-action.html.twig' with {
        url: url('umio_user.register'),
        title: ('I want to sign up'|t),
        logged_off_alert: true
      } %}
    </section>
  {% endif %}

  {% include '@umio_base/components/modal/vacancy--created.html.twig' %}
</article>
