<?php

namespace Drupal\umio_front_area\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Form to save the counter to display in landing page.
 */
class UmioCounterConfigForm extends ConfigFormBase {

  /**
   * {@inheritdoc}
   */
  protected function getEditableConfigNames(): array {
    return [
      'umio_front_area.umio_counters',
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId(): string {
    return 'umio_counters_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state): array {
    $form = parent::buildForm($form, $form_state);

    $markup = '<h6 class="my-4 fw-bold">@title</h6>';
    $markup = str_replace(
      '@title',
      $this->t('Atualize o nÃºmero de oportunidades:'),
      $markup
    );

    $form['field_title'] = [
      '#type' => 'markup',
      '#markup' => $markup,
    ];

    $form['field_counter_job_total'] = [
      '#type' => 'number',
      '#title' => $this->t('Job opportunities generated by 1MiO'),
      '#default_value' => $this->getConfigField('field_counter_job_total'),
      '#min' => 0,
      '#required' => TRUE,
    ];

    $form['field_counter_vacancies_closed'] = [
      '#type' => 'number',
      '#title' => $this->t('Job opportunities filled by 1MiO'),
      '#default_value' => $this->getConfigField('field_counter_vacancies_closed'),
      '#min' => 0,
      '#required' => TRUE,
    ];

    $form['field_counter_vacancies_total'] = [
      '#type' => 'number',
      '#title' => $this->t('Job opportunities available on 1MiO'),
      '#default_value' => $this->getConfigField('field_counter_vacancies_total'),
      '#min' => 0,
      '#required' => TRUE,
    ];

    $form['field_counter_courses_total'] = [
      '#type' => 'number',
      '#title' => $this->t('Opportunities for professional development of young people'),
      '#default_value' => $this->getConfigField('field_counter_courses_total'),
      '#min' => 0,
      '#required' => TRUE,
    ];

    $form['field_counter_connectivity_inclusion'] = [
      '#type' => 'number',
      '#title' => $this->t('Connectivity and Digital Inclusion Opportunities'),
      '#default_value' => $this->getConfigField('field_counter_connectivity_inclusion'),
      '#min' => 0,
      '#required' => TRUE,
    ];

    $form['actions']['submit']['#value'] = $this->t('Save');

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state): void {
    parent::submitForm($form, $form_state);

    $config = $this->config('umio_front_area.umio_counters');

    $config->set("field_counter_job_total", $form_state->getValue("field_counter_job_total"));
    $config->set("field_counter_vacancies_closed", $form_state->getValue("field_counter_vacancies_closed"));
    $config->set("field_counter_vacancies_total", $form_state->getValue("field_counter_vacancies_total"));
    $config->set("field_counter_courses_total", $form_state->getValue("field_counter_courses_total"));
    $config->set("field_counter_connectivity_inclusion", $form_state->getValue("field_counter_connectivity_inclusion"));

    $config->save();
  }

  /**
   * Get the value of the config field.
   *
   * @param string $configField
   *   The machine name of the config field.
   *
   * @return int
   *   The value of the config.
   */
  private function getConfigField(string $configField): int {
    $countersConfig = $this->config($this->getEditableConfigNames()[0]);
    $value = $countersConfig->get($configField);
    if (!$value) {
      return 0;
    }

    return (int) $value;
  }

}
